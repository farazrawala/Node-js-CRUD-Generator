const express = require("express");
const router = express.Router();

// Dynamic route generator
const { registerAllModelRoutes } = require("../utils/dynamicRouteGenerator");

const {
  handleUserSignup,
  handleUserSignupCompany,
  handleUserLogin,
  handleUserUpdate,
  getAllUser,
  userById,
  handleAdminLogin,
  findUserByEmail,
} = require("../controllers/user");

const {
  productCreate,
  productUpdate,
  productById,
  getAllProducts,
  updateWarehouseQuantity,
  getProductWarehouseInventory,
  checkWarehouseStock,
  getProductsByWarehouse,
} = require("../controllers/product");

// Note: Blog routes are now handled dynamically by registerAllModelRoutes
// Uncomment these if you need custom routes
// const {
//   blogCreate,
//   blogUpdate,
//   blogById,
//   getAllblog,
//   getallblogactive,
//   blogdelete,
// } = require("../controllers/blog");

// Note: Warehouse routes are now handled dynamically
// const {
//   warehouseCreate,
//   warehouseUpdate,
//   warehouseById,
//   getAllwarehouse,
//   getallwarehouseactive,
//   warehousedelete,
// } = require("../controllers/warehouse");

// Note: Company routes are now handled dynamically
// const {
//   companyCreate,
//   companyUpdate,
//   companyById,
//   getAllcompany,
//   getallcompanyactive,
//   companydelete,
// } = require("../controllers/company");

// Note: Complain routes are now handled dynamically
// const {
//   complainCreate,
//   complainUpdate,
//   complainById,
//   getAllcomplain,
// } = require("../controllers/complain");

// Note: Order and Order Item routes are now handled dynamically
// const {
//   orderCreate,
//   orderUpdate,
//   orderById,
//   getAllorder,
// } = require("../controllers/order");

// const {
//   order_itemCreate,
//   order_itemUpdate,
//   order_itemById,
//   getAllorder_item,
// } = require("../controllers/order_item");




// User routes - Custom auth and management
router.post("/user/user_company", handleUserSignupCompany);
router.post("/user/create", handleUserSignup);
router.patch("/user/update/:id", handleUserUpdate);
router.post("/user/login", handleUserLogin);
router.get("/user/get-all", getAllUser);
router.get("/user/get/:id", userById);
router.post("/user/get-one", findUserByEmail);

// Product routes - Custom CRUD + warehouse inventory management
router.post("/product/create", productCreate);
router.patch("/product/update/:id", productUpdate);
router.get("/product/get/:id", productById);
router.get("/product/get-all", getAllProducts);

// Product warehouse inventory management routes
router.patch("/product/:id/warehouse-quantity", updateWarehouseQuantity);
router.get("/product/:id/warehouse-inventory", getProductWarehouseInventory);
router.get("/product/:id/check-stock", checkWarehouseStock);
router.get("/warehouse/:warehouseId/products", getProductsByWarehouse);

// Blog, Integration, Warehouse, Company, Complain, Order, and Order_item routes
// are now automatically generated by registerAllModelRoutes() at the bottom of this file

router.post("/test", (req, res) => {
  console.log("Test route hit");
  res.status(200).json({ message: "Test successful" });
});

// Admin routes
router.post("/login/admin", handleAdminLogin);

// Register dynamic CRUD routes for all models
// This automatically creates routes like: /{model}/create, /{model}/update/:id, /{model}/get/:id, etc.
registerAllModelRoutes(router, {
  excludedModels: [
    'user',      // User has custom auth routes
    'product',   // Product has custom warehouse inventory routes
    'order',     // Keep custom routes if needed
    'order_item',// Keep custom routes if needed
    'url',       // URL has custom routes
  ],
  modelConfigs: {
    // You can configure specific models here if needed
    blog: {
      enabled: true,
      excludedRoutes: [],
      customRoutes: []
    },
    integration: {
      enabled: true,
      excludedRoutes: []
    },
    warehouse: {
      enabled: true,
      excludedRoutes: []
    },
    company: {
      enabled: true,
      excludedRoutes: []
    },
    complain: {
      enabled: true,
      excludedRoutes: ['delete'] // Complain doesn't have delete route
    },
    purchase_order: {
      enabled: true,
      excludedRoutes: []
    },
    purchase_order_item: {
      enabled: true,
      excludedRoutes: []
    }
  }
});

module.exports = router;
