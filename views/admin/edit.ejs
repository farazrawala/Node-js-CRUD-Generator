<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - Admin Panel</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .sidebar { transition: transform 0.3s ease-in-out; }
        .sidebar.collapsed { transform: translateX(-100%); }
        .main-content { transition: margin-left 0.3s ease-in-out; }
        .main-content.expanded { margin-left: 0; }
    </style>
</head>
<body class="bg-gray-100">
    <!-- Header -->
    <header class="bg-white shadow-sm border-b border-gray-200 fixed top-0 left-0 right-0 z-50">
        <div class="flex items-center justify-between px-6 py-4">
            <div class="flex items-center">
                <button id="sidebarToggle" class="text-gray-500 hover:text-gray-700 mr-4">
                    <i class="fas fa-bars text-xl"></i>
                </button>
                <h1 class="text-2xl font-bold text-gray-900"><%= title %></h1>
            </div>
            <div class="flex items-center space-x-4">
                <a href="/admin/dashboard" class="text-gray-600 hover:text-gray-900">
                    <i class="fas fa-tachometer-alt mr-2"></i>Dashboard
                </a>
                <a href="/admin/logout" class="text-red-600 hover:text-red-800">
                    <i class="fas fa-sign-out-alt mr-2"></i>Logout
                </a>
            </div>
        </div>
    </header>

    <!-- Sidebar -->
    <aside id="sidebar" class="sidebar fixed top-16 left-0 h-full w-64 bg-white shadow-lg z-40">
        <nav class="mt-8">
            <div class="px-4 py-2">
                <h3 class="text-xs font-semibold text-gray-500 uppercase tracking-wider">Management</h3>
            </div>
            <% if (typeof routes !== 'undefined' && routes.length > 0) { %>
                <% routes.forEach(route => { %>
                    <a href="<%= route.path %>" class="flex items-center px-4 py-3 text-gray-700 hover:bg-gray-100 hover:text-gray-900">
                        <i class="<%= route.icon %> mr-3"></i>
                        <span><%= route.name %></span>
                    </a>
                <% }); %>
            <% } else { %>
                <!-- Fallback static routes if dynamic routes are not available -->
                <a href="/admin/users" class="flex items-center px-4 py-3 text-gray-700 hover:bg-gray-100 hover:text-gray-900">
                    <i class="fas fa-users mr-3"></i>
                    <span>Users</span>
                </a>
                <a href="/admin/products" class="flex items-center px-4 py-3 text-gray-700 hover:bg-gray-100 hover:text-gray-900">
                    <i class="fas fa-box mr-3"></i>
                    <span>Products</span>
                </a>
                <a href="/admin/blogs" class="flex items-center px-4 py-3 text-gray-700 hover:bg-gray-100 hover:text-gray-900">
                    <i class="fas fa-blog mr-3"></i>
                    <span>Blogs</span>
                </a>
                <a href="/admin/orders" class="flex items-center px-4 py-3 text-gray-700 hover:bg-gray-100 hover:text-gray-900">
                    <i class="fas fa-shopping-cart mr-3"></i>
                    <span>Orders</span>
                </a>
                <a href="/admin/categories" class="flex items-center px-4 py-3 text-gray-700 hover:bg-gray-100 hover:text-gray-900">
                    <i class="fas fa-tags mr-3"></i>
                    <span>Categories</span>
                </a>
                <a href="/admin/complain" class="flex items-center px-4 py-3 text-gray-700 hover:bg-gray-100 hover:text-gray-900">
                    <i class="fas fa-exclamation-triangle mr-3"></i>
                    <span>Complaints</span>
                </a>
            <% } %>
        </nav>
    </aside>

    <!-- Main Content -->
    <main id="mainContent" class="main-content ml-64 mt-16 p-6">
        <!-- Breadcrumb -->
        <nav class="flex mb-6" aria-label="Breadcrumb">
            <ol class="inline-flex items-center space-x-1 md:space-x-3">
                <li class="inline-flex items-center">
                    <a href="/admin/dashboard" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-blue-600">
                        <i class="fas fa-home mr-2"></i>
                        Dashboard
                    </a>
                </li>
                <li>
                    <div class="flex items-center">
                        <i class="fas fa-chevron-right text-gray-400 mx-2"></i>
                        <a href="/admin/<%= modelName %>" class="text-sm font-medium text-gray-700 hover:text-blue-600">
                            <%= titleCase %>s
                        </a>
                    </div>
                </li>
                <li aria-current="page">
                    <div class="flex items-center">
                        <i class="fas fa-chevron-right text-gray-400 mx-2"></i>
                        <span class="text-sm font-medium text-gray-500">Edit</span>
                    </div>
                </li>
            </ol>
        </nav>

        <!-- Page Header -->
        <div class="mb-6">
            <h2 class="text-3xl font-bold text-gray-900"><%= title %></h2>
            <p class="text-gray-600">Update the <%= singularName.toLowerCase() %> information</p>
        </div>

        <!-- Edit Form -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <form method="POST" action="<%= action %>" enctype="multipart/form-data" class="space-y-6">
                <!-- Hidden method override for PUT -->
                <input type="hidden" name="_method" value="PUT">
                
                <!-- Dynamic Form Fields -->
                <% Object.keys(fieldConfig).forEach(fieldName => { %>
                    <% const field = fieldConfig[fieldName]; %>
                    <% 
                    // Skip display-only fields in forms
                    const displayOnlyFields = ['warehouse_inventory_display', 'total_quantity'];
                    if (displayOnlyFields.includes(fieldName)) {
                        return; // Skip this field
                    }
                    %>
                    <div class="<%= field.type === 'checkbox' ? 'flex items-center' : '' %>">
                        <% if (field.type !== 'checkbox') { %>
                            <label for="<%= field.name %>" class="block text-sm font-medium text-gray-700 mb-2">
                                <%= field.label %>
                                <% if (field.required) { %>
                                    <span class="text-red-500">*</span>
                                <% } %>
                            </label>
                        <% } %>
                        
                        <% if (field.type === 'text' || field.type === 'email') { %>
                            <input type="<%= field.type %>" 
                                   id="<%= field.name %>" 
                                   name="<%= field.name %>" 
                                   value="<%= record[field.name] || '' %>"
                                   placeholder="<%= field.placeholder %>"
                                   <% if (field.required) { %>required<% } %>
                                   <% if (field.validation && field.validation.minLength) { %>minlength="<%= field.validation.minLength %>"<% } %>
                                   <% if (field.validation && field.validation.maxLength) { %>maxlength="<%= field.validation.maxLength %>"<% } %>
                                   <% if (field.validation && field.validation.pattern) { %>pattern="<%= field.validation.pattern %>"<% } %>
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 <%= errors && errors.find(e => e.field === field.name) ? 'border-red-500' : '' %>">
                        
                        <% } else if (field.type === 'password') { %>
                            <input type="password" 
                                   id="<%= field.name %>" 
                                   name="<%= field.name %>" 
                                   value="<%= record[field.name] || '' %>"
                                   placeholder="<%= field.placeholder %>"
                                   <% if (field.required) { %>required<% } %>
                                   <% if (field.validation && field.validation.minLength) { %>minlength="<%= field.validation.minLength %>"<% } %>
                                   <% if (field.validation && field.validation.maxLength) { %>maxlength="<%= field.validation.maxLength %>"<% } %>
                                   <% if (field.validation && field.validation.pattern) { %>pattern="<%= field.validation.pattern %>"<% } %>
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 <%= errors && errors.find(e => e.field === field.name) ? 'border-red-500' : '' %>">
                        
                        <% } else if (field.type === 'number') { %>
                            <input type="number" 
                                   id="<%= field.name %>" 
                                   name="<%= field.name %>" 
                                   value="<%= record[field.name] || '' %>"
                                   placeholder="<%= field.placeholder %>"
                                   <% if (field.required) { %>required<% } %>
                                   <% if (field.validation && field.validation.min) { %>min="<%= field.validation.min %>"<% } %>
                                   <% if (field.validation && field.validation.max) { %>max="<%= field.validation.max %>"<% } %>
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 <%= errors && errors.find(e => e.field === field.name) ? 'border-red-500' : '' %>">
                        
                        <% } else if (field.type === 'textarea') { %>
                            <textarea id="<%= field.name %>" 
                                      name="<%= field.name %>" 
                                      rows="4"
                                      placeholder="<%= field.placeholder %>"
                                      <% if (field.required) { %>required<% } %>
                                      <% if (field.validation && field.validation.minLength) { %>minlength="<%= field.validation.minLength %>"<% } %>
                                      <% if (field.validation && field.validation.maxLength) { %>maxlength="<%= field.validation.maxLength %>"<% } %>
                                      class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 <%= errors && errors.find(e => e.field === field.name) ? 'border-red-500' : '' %>"><%= record[field.name] || '' %></textarea>
                        
                        <% } else if (field.type === 'select') { %>
                            <script>
                                console.log('Field Name2:', '<%= field.name %>');
                                console.log('Field Options:', <%- JSON.stringify(field.options) %>);
                                console.log('Field Options Length:', <%= field.options ? field.options.length : 0 %>);
                                console.log('Select :', <%- JSON.stringify(record[field.name] && record[field.name]._id ? record[field.name]._id : null) %>);
                                <% if (field.options && field.options.length > 0) { %>
                                    <% field.options.forEach((option, index) => { %>
                                        console.log('Option <%= index %>:', <%- JSON.stringify(option) %>);
                                    <% }); %>
                                <% } %>
                            </script>
                            <select id="<%= field.name %>" 
                                    name="<%= field.name %>" 
                                    <% if (field.required) { %>required<% } %>
                                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 <%= errors && errors.find(e => e.field === field.name) ? 'border-red-500' : '' %>">
                                <option value="">Select <%= field.label %></option>
                                <% if (field.options && field.options.length > 0) { %>
                                    <% field.options.forEach(option => { %>
                                        <option value="<%= option.value %>" <%= (record[field.name] && record[field.name]._id && record[field.name]._id.toString() === option.value) ? 'selected' : '' %>>
                                            <%= option.label %>
                                        </option>
                                    <% }); %>
                                <% } %>
                            </select>
                        
                        <% } else if (field.type === 'multiselect') { %>
                            <script>
                                console.log('Edit - Multiselect Field Name:', '<%= field.name %>');
                                console.log('Edit - Multiselect Field Options:', <%- JSON.stringify(field.options) %>);
                                console.log('Edit - Multiselect Options Length:', <%= field.options ? field.options.length : 0 %>);
                                console.log('Edit - Multiselect Current Value:', <%- JSON.stringify(record[field.name] || null) %>);
                                console.log('Edit - Multiselect Is Array:', <%= Array.isArray(record[field.name]) %>);
                                console.log('Edit - Multiselect Array Length:', <%= record[field.name] && Array.isArray(record[field.name]) ? record[field.name].length : 0 %>);
                                <% if (field.options && field.options.length > 0) { %>
                                    <% field.options.forEach((option, index) => { %>
                                        console.log('Edit - Multiselect Option <%= index %>:', <%- JSON.stringify(option) %>);
                                        console.log('Edit - Multiselect Option <%= index %> Selected:', <%= Array.isArray(record[field.name]) && record[field.name].some(item => (typeof item === 'object' && item._id) ? item._id.toString() === option.value : item.toString() === option.value) %>);
                                        console.log('Edit - Multiselect Option <%= index %> Value:', '<%= option.value %>');
                                    <% }); %>
                                <% } %>
                                <% if (record[field.name] && Array.isArray(record[field.name])) { %>
                                    <% record[field.name].forEach((item, index) => { %>
                                        console.log('Edit - Multiselect Current Item <%= index %>:', <%- JSON.stringify(item) %>);
                                    <% }); %>
                                <% } %>
                            </script>
                            <select id="<%= field.name %>" 
                                    name="<%= field.name %>[]" 
                                    multiple
                                    <% if (field.required) { %>required<% } %>
                                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 <%= errors && errors.find(e => e.field === field.name) ? 'border-red-500' : '' %>">
                                <% if (field.options && field.options.length > 0) { %>
                                    <% field.options.forEach(option => { %>
                                        <option value="<%= option.value %>" <%= (Array.isArray(record[field.name]) && record[field.name].some(item => (typeof item === 'object' && item._id) ? item._id.toString() === option.value : item.toString() === option.value)) ? 'selected' : '' %>>
                                            <%= option.label %>
                                        </option>
                                    <% }); %>
                                <% } %>
                            </select>
                            <p class="mt-1 text-sm text-gray-500">Hold Ctrl (or Cmd on Mac) to select multiple options</p>
                        
                        <% } else if (field.type === 'checkbox') { %>
                            <div class="flex items-center">
                                <input type="checkbox" 
                                       id="<%= field.name %>" 
                                       name="<%= field.name %>" 
                                       value="true"
                                       <%= record[fieldName] ? 'checked' : '' %>
                                       class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded <%= errors && errors.find(e => e.field === field.name) ? 'border-red-500' : '' %>">
                                <label for="<%= field.name %>" class="ml-2 block text-sm text-gray-900">
                                    <%= field.label %>
                                    <% if (field.required) { %>
                                        <span class="text-red-500">*</span>
                                    <% } %>
                                </label>
                            </div>
                        
                        <% } else if (field.type === 'date') { %>
                            <input type="date" 
                                   id="<%= field.name %>" 
                                   name="<%= field.name %>" 
                                   value="<%= record[field.name] ? new Date(record[field.name]).toISOString().split('T')[0] : '' %>"
                                   <% if (field.required) { %>required<% } %>
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 <%= errors && errors.find(e => e.field === field.name) ? 'border-red-500' : '' %>">
                        
                        <% } else if (field.type === 'file') { %>
                            <div class="space-y-2">
                                <!-- Current file preview -->
                                <% if (record[field.name]) { %>
                                    <% 
                                    // Handle both single images and multiple images
                                    let images = record[field.name];
                                    if (typeof images === 'string') {
                                        images = [images]; // Convert single image to array
                                    } else if (!Array.isArray(images)) {
                                        images = []; // Ensure it's an array
                                    }
                                    
                                    // Clean up image paths for display
                                    const cleanImagePath = (imagePath) => {
                                        if (!imagePath || typeof imagePath !== 'string') return '';
                                        
                                        // Clean up the path to avoid double /uploads/
                                        if (imagePath.startsWith('/uploads/uploads/')) {
                                            imagePath = imagePath.replace('/uploads/uploads/', '/uploads/');
                                        } else if (!imagePath.startsWith('/uploads/')) {
                                            if (imagePath.startsWith('/')) {
                                                imagePath = '/uploads' + imagePath;
                                            } else {
                                                imagePath = '/uploads/' + imagePath;
                                            }
                                        }
                                        
                                        // Use baseUrl if available
                                        if (typeof baseUrl !== 'undefined' && baseUrl) {
                                            if (imagePath.startsWith('/')) {
                                                imagePath = baseUrl + imagePath;
                                            } else {
                                                imagePath = baseUrl + '/' + imagePath;
                                            }
                                        }
                                        
                                        return imagePath;
                                    };
                                    
                                    // Store original paths for removal tracking
                                    const originalImages = images.filter(img => img);
                                    const cleanedImages = originalImages.map(cleanImagePath).filter(img => img);
                                    %>
                                    <% if (cleanedImages.length > 0) { %>
                                        <div class="space-y-2">
                                            <p class="text-sm font-medium text-gray-900">Current <%= field.label %><%= cleanedImages.length > 1 ? 's' : '' %></p>
                                            <div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-2">
                                                <% cleanedImages.forEach((imageSrc, index) => { %>
                                                    <% const originalPath = originalImages[index]; %>
                                                    <div class="relative group">
                                                        <img src="<%= imageSrc %>" alt="Current <%= field.label %> <%= index + 1 %>" class="h-20 w-20 rounded object-cover border border-gray-200">
                                                        <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 rounded transition-all duration-200 flex items-center justify-center">
                                                            <span class="text-white text-xs opacity-0 group-hover:opacity-100 transition-opacity">View</span>
                                                        </div>
                                                        <button type="button" 
                                                                onclick="removeImage(this, '<%= originalPath %>', '<%= field.name %>')"
                                                                class="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-red-600 transition-colors"
                                                                title="Remove this image">
                                                            ×
                                                        </button>
                                                    </div>
                                                <% }); %>
                                            </div>
                                            <p class="text-xs text-gray-500">Click to view full size</p>
                                        </div>
                                    <% } %>
                                <% } %>
                                
                                <!-- File input -->
                                <input type="file" 
                                       id="<%= field.name %>" 
                                       name="<%= field.name %>" 
                                       accept="image/*"
                                       <% 
                                         // Check if this field is an array field (for multiple file uploads)
                                         const isArrayField = field.name.includes('multi_') || field.name.includes('images') || field.name.includes('photos');
                                         if (isArrayField) { 
                                       %>multiple<% } %>
                                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 <%= errors && errors.find(e => e.field === field.name) ? 'border-red-500' : '' %>">
                                
                                <p class="text-xs text-gray-500">
                                    <% if (isArrayField) { %>
                                        Leave empty to keep current images - New images will be added to existing ones
                                    <% } else { %>
                                        Leave empty to keep current file
                                    <% } %>
                                </p>
                                
                                <!-- Hidden inputs to track removed images -->
                                <div id="removed-images-<%= field.name %>"></div>
                            </div>
                        
                        <% } else if (field.type === 'tags') { %>
                            <input type="text" 
                                   id="<%= field.name %>" 
                                   name="<%= field.name %>" 
                                   value="<%= Array.isArray(record[field.name]) ? record[field.name].join(', ') : '' %>"
                                   placeholder="Enter tags separated by commas"
                                   <% if (field.required) { %>required<% } %>
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 <%= errors && errors.find(e => e.field === field.name) ? 'border-red-500' : '' %>">
                        
                        <% } else if (field.type === 'custom' && field.name === 'warehouse_inventory') { %>
                            <%- include('warehouse-inventory-field', { record: record, warehouses: typeof warehouses !== 'undefined' ? warehouses : [] }) %>
                        <% } %>
                        
                        <!-- Field Help Text -->
                        <% if (field.helpText) { %>
                            <p class="mt-1 text-sm text-gray-500"><%= field.helpText %></p>
                        <% } %>
                        
                        <!-- Field Validation Error -->
                        <% if (errors && errors.find(e => e.field === field.name)) { %>
                            <% const error = errors.find(e => e.field === field.name); %>
                            <p class="mt-1 text-sm text-red-600"><%= error.message %></p>
                        <% } %>
                    </div>
                <% }); %>

                <!-- Form Actions -->
                <div class="flex justify-end space-x-3 pt-6 border-t border-gray-200">
                    <a href="/admin/<%= modelName %>" 
                       class="bg-gray-300 hover:bg-gray-400 text-gray-800 px-6 py-2 rounded-md font-medium transition duration-200">
                        Cancel
                    </a>
                    <button type="submit" 
                            class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-md font-medium transition duration-200">
                        <i class="fas fa-save mr-2"></i>Update <%= titleCase %>
                    </button>
                </div>
            </form>
        </div>
    </main>

    <script>
        // Sidebar toggle
        const sidebar = document.getElementById('sidebar');
        const mainContent = document.getElementById('mainContent');
        const sidebarToggle = document.getElementById('sidebarToggle');
        
        sidebarToggle.addEventListener('click', () => {
            sidebar.classList.toggle('collapsed');
            mainContent.classList.toggle('expanded');
        });

        // Form validation
        document.querySelector('form').addEventListener('submit', function(e) {
            console.log('🔍 Form validation starting...');
            
            const requiredFields = document.querySelectorAll('[required]');
            let isValid = true;
            
            requiredFields.forEach(field => {
                if (!field.value.trim()) {
                    isValid = false;
                    field.classList.add('border-red-500');
                    console.log('❌ Required field empty:', field.name);
                } else {
                    field.classList.remove('border-red-500');
                }
            });
            
            if (!isValid) {
                e.preventDefault();
                alert('Please fill in all required fields');
                console.log('❌ Form submission prevented due to validation errors');
            } else {
                console.log('✅ Form validation passed');
            }
        });

        // Real-time validation
        document.querySelectorAll('input, textarea, select').forEach(field => {
            field.addEventListener('blur', function() {
                if (this.hasAttribute('required') && !this.value.trim()) {
                    this.classList.add('border-red-500');
                } else {
                    this.classList.remove('border-red-500');
                }
            });
        });

        // Method override for PUT requests
        document.querySelector('form').addEventListener('submit', function(e) {
            console.log('📤 Form submission started');
            
            // Debug: Log all form data before submission
            console.log('📤 Form submission data:');
            const formData = new FormData(this);
            for (let [key, value] of formData.entries()) {
                if (key.startsWith('removed_images_')) {
                    console.log('🗑️ Removed image data:', key, '=', value);
                }
            }
            
            // Ensure method override is set
            const methodInput = document.querySelector('input[name="_method"]');
            if (methodInput && methodInput.value === 'PUT') {
                // Create a hidden input for the actual method
                const hiddenMethod = document.createElement('input');
                hiddenMethod.type = 'hidden';
                hiddenMethod.name = '_method';
                hiddenMethod.value = 'PUT';
                this.appendChild(hiddenMethod);
                console.log('✅ Method override set to PUT');
            } else {
                console.log('⚠️ Method override not found or not set to PUT');
            }
            
            // Don't prevent default - let the form submit normally
            console.log('📤 Form submitting...');
        });

        // Function to remove individual images
        function removeImage(button, imageSrc, fieldName) {
            if (confirm('Are you sure you want to remove this image?')) {
                console.log('🗑️ Removing image:', imageSrc, 'from field:', fieldName);
                
                // Hide the image container
                button.closest('.relative').style.display = 'none';
                
                // Add hidden input to track removed image
                const removedContainer = document.getElementById('removed-images-' + fieldName);
                if (removedContainer) {
                    const hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'removed_images_' + fieldName + '[]';
                    hiddenInput.value = imageSrc;
                    removedContainer.appendChild(hiddenInput);
                    
                    console.log('✅ Hidden input added for removed image:', imageSrc);
                    console.log('📋 Current removed images for', fieldName + ':', Array.from(removedContainer.children).map(input => input.value));
                    
                    // Debug: Check if the input was actually added to the form
                    const form = document.querySelector('form');
                    const allInputs = form.querySelectorAll('input[name="removed_images_' + fieldName + '[]"]');
                    console.log('🔍 Total hidden inputs with this name:', allInputs.length);
                    allInputs.forEach((input, index) => {
                        console.log('🔍 Hidden input', index + 1, ':', input.name, '=', input.value);
                    });
                } else {
                    console.error('❌ Could not find removed container for field:', fieldName);
                }
            }
        }
    </script>
</body>
</html>
