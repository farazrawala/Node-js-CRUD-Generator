<!-- Warehouse Inventory Management Field -->
<div class="warehouse-inventory-container">
    <label class="block text-sm font-medium text-gray-700 mb-2">
        Warehouse Inventory
        <span class="text-gray-500 text-xs ml-1">(Manage stock across warehouses)</span>
    </label>
    
    <div id="warehouse-inventory-list" class="space-y-3 mb-3">
        <% 
        let warehouseInventory = [];
        if (typeof record !== 'undefined' && record && record.warehouse_inventory) {
            warehouseInventory = Array.isArray(record.warehouse_inventory) ? record.warehouse_inventory : [];
        }
        %>
        
        <% if (warehouseInventory.length > 0) { %>
            <% warehouseInventory.forEach((item, index) => { %>
                <div class="warehouse-inventory-item flex gap-3 items-start p-3 bg-gray-50 rounded-md border border-gray-200">
                    <div class="flex-1 grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div>
                            <label class="block text-xs font-medium text-gray-600 mb-1">Warehouse</label>
                            <select name="warehouse_inventory[<%= index %>][warehouse_id]" 
                                    class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                                    required>
                                <option value="">Select Warehouse</option>
                                <% if (typeof warehouses !== 'undefined' && warehouses.length > 0) { %>
                                    <% warehouses.forEach(warehouse => { %>
                                        <option value="<%= warehouse._id %>" 
                                                <%= (item.warehouse_id && item.warehouse_id.toString() === warehouse._id.toString()) ? 'selected' : '' %>>
                                            <%= warehouse.warehouse_name %> - <%= warehouse.warehouse_address %>
                                        </option>
                                    <% }); %>
                                <% } %>
                            </select>
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-600 mb-1">Quantity</label>
                            <input type="number" 
                                   name="warehouse_inventory[<%= index %>][quantity]" 
                                   value="<%= item.quantity || 0 %>"
                                   min="0" 
                                   step="1"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                                   required>
                        </div>
                    </div>
                    <button type="button" 
                            onclick="removeWarehouseInventoryItem(this)" 
                            class="mt-6 bg-red-500 hover:bg-red-600 text-white px-3 py-2 rounded-md text-sm transition-colors flex-shrink-0">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            <% }); %>
        <% } %>
    </div>
    
    <button type="button" 
            onclick="addWarehouseInventoryItem()" 
            class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors">
        <i class="fas fa-plus mr-2"></i>Add Warehouse
    </button>
    
    <p class="mt-2 text-xs text-gray-500">
        <i class="fas fa-info-circle mr-1"></i>
        Add multiple warehouses to track inventory across different locations
    </p>
</div>

<script>
    // Warehouse data (passed from server)
    const warehouses = <%- typeof warehouses !== 'undefined' ? JSON.stringify(warehouses) : '[]' %>;
    
    // Counter for new items - calculate from existing items
    let warehouseInventoryCounter = document.querySelectorAll('.warehouse-inventory-item').length;
    
    // Add new warehouse inventory item
    function addWarehouseInventoryItem() {
        if (warehouses.length === 0) {
            alert('No warehouses available. Please create a warehouse first.');
            return;
        }
        
        const container = document.getElementById('warehouse-inventory-list');
        if (!container) {
            return;
        }
        
        const itemHtml = `
            <div class="warehouse-inventory-item flex gap-3 items-start p-3 bg-gray-50 rounded-md border border-gray-200">
                <div class="flex-1 grid grid-cols-1 md:grid-cols-2 gap-3">
                    <div>
                        <label class="block text-xs font-medium text-gray-600 mb-1">Warehouse</label>
                        <select name="warehouse_inventory[${warehouseInventoryCounter}][warehouse_id]" 
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                                required>
                            <option value="">Select Warehouse</option>
                            ${warehouses.map(w => `
                                <option value="${w._id}">${w.warehouse_name} - ${w.warehouse_address}</option>
                            `).join('')}
                        </select>
                    </div>
                    <div>
                        <label class="block text-xs font-medium text-gray-600 mb-1">Quantity</label>
                        <input type="number" 
                               name="warehouse_inventory[${warehouseInventoryCounter}][quantity]" 
                               value="0"
                               min="0" 
                               step="1"
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                               required>
                    </div>
                </div>
                <button type="button" 
                        onclick="removeWarehouseInventoryItem(this)" 
                        class="mt-6 bg-red-500 hover:bg-red-600 text-white px-3 py-2 rounded-md text-sm transition-colors flex-shrink-0">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `;
        
        container.insertAdjacentHTML('beforeend', itemHtml);
        warehouseInventoryCounter++;
    }
    
    // Remove warehouse inventory item
    function removeWarehouseInventoryItem(button) {
        if (confirm('Are you sure you want to remove this warehouse inventory item?')) {
            button.closest('.warehouse-inventory-item').remove();
            
            // Re-index remaining items
            reindexWarehouseInventoryItems();
        }
    }
    
    // Re-index items after removal
    function reindexWarehouseInventoryItems() {
        const items = document.querySelectorAll('.warehouse-inventory-item');
        
        items.forEach((item, index) => {
            const warehouseSelect = item.querySelector('select[name^="warehouse_inventory"]');
            const quantityInput = item.querySelector('input[name^="warehouse_inventory"]');
            
            if (warehouseSelect) {
                warehouseSelect.name = `warehouse_inventory[${index}][warehouse_id]`;
            }
            if (quantityInput) {
                quantityInput.name = `warehouse_inventory[${index}][quantity]`;
            }
        });
        
        warehouseInventoryCounter = items.length;
    }
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', function() {
        // Ensure the add button is available
        const addButton = document.querySelector('button[onclick="addWarehouseInventoryItem()"]');
        if (!addButton) {
            console.error('Add Warehouse button not found');
        }
    });
</script>

<style>
    .warehouse-inventory-item {
        animation: slideIn 0.3s ease-out;
    }
    
    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

